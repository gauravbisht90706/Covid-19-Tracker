{"version":3,"sources":["Table.js","InfoBox.js","util.js","Map.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["Table","countries","className","map","country","cases","i","numeral","format","InfoBox","title","total","active","isRed","props","console","log","Card","onClick","CardContent","Typography","gutterBottom","color","casesTypeColors","hex","multiplier","recovered","rgb","half_op","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCountries","setMapCountries","setCaseType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","getCountriesData","name","iso2","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d10d140c.chunk.js","sourcesContent":["import React from 'react'\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className = \"tableContainer\">\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases, i }) => (\r\n                <tr key = {i}>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n                \r\n            ))}\r\n            \r\n        </div></div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed,  ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent className = \"cardBackground\">\r\n        <Typography className = \"titleBox\"  gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 200,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 1000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n  //Drawing circle on countries with information\r\nexport const showDataOnMap = (data, casesType = \"cases\") => \r\n  data.map((country, i) => (\r\n    <Circle\r\n      key = {i}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n    >\r\n    \r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport './Map.css';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, casesType, zoom, center}) {\r\n    return (\r\n        <div className=\"map\">\r\n            \r\n            <LeafletMap center={center} zoom={zoom} >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                >\r\n                </TileLayer>\r\n\r\n                {showDataOnMap(countries, casesType)}\r\n                \r\n            </LeafletMap>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"mm/dd/yyyy\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\"}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import {\n  Card,\n  CardContent,\n  FormControl, Menu, MenuItem,\n  Select\n} from '@material-ui/core';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport './Table.css';\nimport Table from './Table';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport { prettyPrintStat } from './util';\nimport numeral from 'numeral';\n\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCaseType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: 40.4796 });\n  // const [mapZoom, setMapZoom] = useState(3);\n  const [mapZoom, setMapZoom] = useState(2);\n\n  //useEffect() is used to run a piece of code based on some condition.\n  //this code will run only once when the component loads and not again.\n\n  useEffect(\n    () => {\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n        .then((response) => response.json())\n        .then((data)=> {\n          setCountryInfo(data);\n      });\n    }, []);\n\n \n  useEffect(\n    () => {\n      const getCountriesData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n          .then((response) => response.json())\n          .then((data) => {\n            const countries = data.map((country) => ({\n              name: country.country,\n              value: country.countryInfo.iso2,\n            }\n            ));\n            \n            let sortedData = sortData(data);\n            setTableData(sortedData);\n            setCountries(countries);\n            setMapCountries(data);\n       })\n      };\n      getCountriesData();\n    }, []);\n  \n  console.log(casesType);\n  \n  const onCountryChange =  async(event) => {\n    const countryCode = event.target.value;\n    \n\n    const url = countryCode === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n    fetch(url)\n      .then(response => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n\n        // all the data of specific country is stored \n        setCountryInfo(data);\n        // setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        // setMapZoom(4);\n        console.log(\"Country data \", data)\n\n        if (countryCode === \"Worldwide\") {\n          setMapCenter({ lat: 34.80746, lng: -40.4796 });\n          setMapZoom(2);\n        }\n\n        else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(3);\n        }\n      });\n  };\n\n  console.log(\"country Info-->>\", countryInfo);\n      \n        \n    return (\n      <div className=\"app\">\n        \n        {/* left side container*/}\n        <div className =\"app_left\">\n\n      \n      \n      {/*--------------------- start of header section------------------------- */}\n\n      <div className=\"app_header\">\n        \n      <h1>COVID-19 TRACKER</h1>\n      <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange = {onCountryChange} value={country}>\n              <MenuItem value = \"worldwide\"><h3 className=\"dropdownHeading\">Worldwide</h3></MenuItem>\n          \n            {\n              countries.map((country, i) => (\n                <MenuItem key={i}value = {country.value}>{country.name}</MenuItem>\n              ))\n}          \n        \n        </Select>\n      \n      </FormControl>\n        </div>  \n                  {/*-----------------------header section ends here-----------------*/}\n\n        {/*-------------------------------Stats in the form of cards---------------*/}\n        \n        <div className=\"app_stats\">\n            <InfoBox\n              onClick = {(e)=> setCaseType(\"cases\")}\n              title=\"Corona Virus Cases\"\n              isRed\n              active = {casesType === \"cases\"}\n              cases={prettyPrintStat(countryInfo.todayCases)}\n              total={prettyPrintStat(countryInfo.cases)} />\n            <InfoBox\n              active = {casesType === \"recovered\"}\n              title=\"Recoverd People\"\n              onClick={(e) => setCaseType(\"recovered\")}\n              cases = {prettyPrintStat(countryInfo.todayRecovered)}\n              total={prettyPrintStat(countryInfo.recovered)} />\n            <InfoBox\n              active={casesType === \"deaths\"}\n              isRed\n              title=\"Deaths\"\n              onClick = {(e)=> setCaseType(\"deaths\")}\n              cases={prettyPrintStat(countryInfo.todayDeaths)}\n              total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n          \n        {/*Map component starts here*/}\n\n          <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n          />\n          \n          \n        </div>\n          \n        {/*----------------End of left component---------------------*/}\n\n        {/* start of right component*/}\n\n        <div className=\"app_right\">\n          <Card>\n            <CardContent>\n              <h3 className = \"tableHeading\">Highest number of cases</h3>\n               <Table countries = {tableData} />\n\n              <h3 className = \"graph_header\">Worldwide new {casesType} </h3>\n\n              <LineGraph\n                className=\"app_graph\"\n                casesType={casesType} />\n                \n            </CardContent>\n          \n          </Card>\n        \n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}